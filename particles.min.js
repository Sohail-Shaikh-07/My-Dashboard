(function(e, t) {
    "use strict";
    
    var createReactElement = function() {
        return createReactElement = "function" == typeof Symbol && Symbol.for && Symbol.for("react.element") || 60103,
        function(type, props, key, children) {
            var defaultProps = type && type.defaultProps;
            var childrenLength = arguments.length - 3;

            if (!props && childrenLength === 0) {
                props = {};
            }

            if (props && defaultProps) {
                for (var propName in defaultProps) {
                    if (props[propName] === undefined) {
                        props[propName] = defaultProps[propName];
                    }
                }
            } else if (!props) {
                props = defaultProps || {};
            }

            if (childrenLength === 1) {
                props.children = children;
            } else if (childrenLength > 1) {
                var childArray = Array(childrenLength);
                for (var i = 0; i < childrenLength; i++) {
                    childArray[i] = arguments[i + 3];
                }
                props.children = childArray;
            }

            return {
                $$typeof: createReactElement,
                type: type,
                props: props,
                key: key === undefined ? null : "" + key,
                ref: null,
                _owner: null,
                _store: {}
            };
        };
    }();

    var createClass = function() {
        function defineProperties(target, props) {
            for (var i = 0; i < props.length; i++) {
                var descriptor = props[i];
                descriptor.enumerable = descriptor.enumerable || false;
                descriptor.configurable = true;
                if ("value" in descriptor) descriptor.writable = true;
                Object.defineProperty(target, descriptor.key, descriptor);
            }
        }
        return function(Constructor, protoProps, staticProps) {
            if (protoProps) defineProperties(Constructor.prototype, protoProps);
            if (staticProps) defineProperties(Constructor, staticProps);
            return Constructor;
        };
    }();

    function classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
            throw new TypeError("Cannot call a class as a function");
        }
    }

    function inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
            throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
            constructor: {
                value: subClass,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
        if (superClass) {
            Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
    }

    function possibleConstructorReturn(self, call) {
        if (!self) {
            throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self;
    }

    (function(global, factory) {
        if (typeof exports === "object" && typeof module !== "undefined") {
            module.exports = factory(require("react"));
        } else if (typeof define === "function" && define.amd) {
            define(["react"], factory);
        } else {
            global.Particles = factory(global.React);
        }
    })(this, function(React) {
        "use strict";
        
        React = React && React.hasOwnProperty("default") ? React.default : React;

        var ParticlesLibrary = function() {
            function ParticlesLibrary(params) {
                classCallCheck(this, ParticlesLibrary);
                this.library = params ? params.library : null;
                this.container = null;
                this.params = params;
            }

            createClass(ParticlesLibrary, [{
                key: "init",
                value: function init() {
                    if (this.library && this.container) {
                        try {
                            this.loadLibrary(this.container);
                        } catch (error) {
                            console.error(error);
                        }
                    }
                }
            }, {
                key: "loadLibrary",
                value: function loadLibrary(container) {
                    if (container && this.library && typeof this.library.load === "function") {
                        return this.library.load(container, this.params);
                    }
                    if (container && this.library) {
                        console.error("tsParticles library contains no valid load method.");
                    }
                    return null;
                }
            }, {
                key: "refresh",
                value: function refresh() {
                    var self = this;
                    if (this.container && this.library) {
                        var width = this.container.offsetWidth;
                        var height = this.container.offsetHeight;
                        if (this.container.offsetWidth !== width || this.container.offsetHeight !== height) {
                            setTimeout(function() {
                                self.loadLibrary(self.container);
                            }, 500);
                        }
                    }
                }
            }, {
                key: "destroy",
                value: function destroy() {
                    this.container = null;
                }
            }]);

            return ParticlesLibrary;
        }();

        var Particles = function(Component) {
            function Particles(props) {
                classCallCheck(this, Particles);
                var _this = possibleConstructorReturn(this, (Particles.__proto__ || Object.getPrototypeOf(Particles)).call(this, props));
                _this.state = {
                    library: undefined
                };
                _this.loadParticles = _this.loadParticles.bind(_this);
                return _this;
            }

            inherits(Particles, Component);

            createClass(Particles, [{
                key: "componentDidMount",
                value: function componentDidMount() {
                    this.loadParticles();
                }
            }, {
                key: "componentDidUpdate",
                value: function componentDidUpdate(prevProps) {
                    if (prevProps.params !== this.props.params && prevProps.id === this.props.id) {
                        this.refresh();
                    }
                    if (prevProps.id !== this.props.id) {
                        this.loadParticles();
                    }
                }
            }, {
                key: "componentWillUnmount",
                value: function componentWillUnmount() {
                    if (this.state.library) {
                        this.state.library.destroy();
                    }
                }
            }, {
                key: "render",
                value: function render() {
                    var _this = this;
                    return createReactElement("div", {
                        ref: function(ref) {
                            _this.containerRef = ref;
                        },
                        id: this.props.id,
                        className: this.props.className,
                        style: this.props.style
                    });
                }
            }, {
                key: "loadParticles",
                value: function loadParticles() {
                    var _this = this;
                    if (this.containerRef && !this.state.library) {
                        var particles = new ParticlesLibrary(this.props.params);
                        particles.container = this.containerRef;
                        particles.init();
                        this.setState({
                            library: particles
                        }, function() {
                            if (_this.props.onLoad) {
                                _this.props.onLoad();
                            }
                        });
                    }
                }
            }, {
                key: "refresh",
                value: function refresh() {
                    if (this.state.library) {
                        this.state.library.refresh();
                    }
                }
            }]);

            return Particles;
        }(React.Component);

        Particles.defaultProps = {
            width: "100%",
            height: "100%",
            params: {},
            style: {}
        };

        return Particles;
    });
})(this);
